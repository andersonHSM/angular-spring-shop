services:
  shop-backend:
    container_name: shop-backend
    build:
      context: spring-shop
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./spring-shop:/app
    depends_on:
      - kafka

  shop-frontend:
    container_name: shop-frontend
    build:
      context: angular-shop
      dockerfile: Dockerfile.dev
    ports:
      - "4200:4200"
    volumes:
      - ./angular-shop:/usr/local/app

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USER}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql
  redis:
    image: 'redis:latest'
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  kafka:
    image: docker.io/bitnami/kafka:3.6
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

volumes:
  postgres-data:
    external: true
  redis-data:
    external: true
  kafka_data:
    driver: local

networks:
  hostnet:
    external: true
    name: host
